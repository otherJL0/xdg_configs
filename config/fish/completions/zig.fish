complete -c zig -n "__fish_use_subcommand" -f -a "build" -d "Build project from build.zig"
complete -c zig -n "__fish_use_subcommand" -f -a "init-exe" -d "Initialize a `zig build` application in the cwd"
complete -c zig -n "__fish_use_subcommand" -f -a "init-lib" -d "Initialize a `zig build` library in the cwd"
complete -c zig -n "__fish_use_subcommand" -f -a "ast-check" -d "Look for simple compile errors in any set of files"
complete -c zig -n "__fish_use_subcommand" -f -a "build-exe" -d "Create executable from source or object files"
complete -c zig -n "__fish_use_subcommand" -f -a "build-lib" -d "Create library from source or object files"
complete -c zig -n "__fish_use_subcommand" -f -a "build-obj" -d "Create object from source or object files"
complete -c zig -n "__fish_use_subcommand" -f -a "fmt" -d "Reformat Zig source into canonical form"
complete -c zig -n "__fish_use_subcommand" -f -a "run" -d "Create executable and run immediately"
complete -c zig -n "__fish_use_subcommand" -f -a "test" -d "Create and run a test build"
complete -c zig -n "__fish_use_subcommand" -f -a "translate" -d "Convert C code to Zig code"
complete -c zig -n "__fish_use_subcommand" -f -a "ar" -d "Use Zig as a drop-in archiver"
complete -c zig -n "__fish_use_subcommand" -f -a "cc" -d "Use Zig as a drop-in C compiler"
complete -c zig -n "__fish_use_subcommand" -f -a "c++" -d "Use Zig as a drop-in C++ compiler"
complete -c zig -n "__fish_use_subcommand" -f -a "dlltool" -d "Use Zig as a drop-in dlltool.exe"
complete -c zig -n "__fish_use_subcommand" -f -a "lib" -d "Use Zig as a drop-in lib.exe"
complete -c zig -n "__fish_use_subcommand" -f -a "ranlib" -d "Use Zig as a drop-in ranlib"
complete -c zig -n "__fish_use_subcommand" -f -a "env" -d "Print lib path, std path, cache directory, and version"
complete -c zig -n "__fish_use_subcommand" -f -a "help" -d "Print this help and exit"
complete -c zig -n "__fish_use_subcommand" -f -a "libc" -d "Display native libc paths file or validate one"
complete -c zig -n "__fish_use_subcommand" -f -a "targets" -d "List available compilation targets"
complete -c zig -n "__fish_use_subcommand" -f -a "version" -d "Print version number and exit"
complete -c zig -n "__fish_use_subcommand" -f -a "zen" -d "Print Zen of Zig and exit"


complete -c zig -n "__fish_seen_subcommand_from build" -s "p" -l "prefix" -r -d "[path] Override default install prefix"
complete -c zig -n "__fish_seen_subcommand_from build" -l "prefix-lib-dir" -r -d "[path] Override default library directory path"
complete -c zig -n "__fish_seen_subcommand_from build" -l "prefix-exe-dir" -r -d "[path] Override default executable directory path"
complete -c zig -n "__fish_seen_subcommand_from build" -l "prefix-include-dir" -r -d "[path] Override default include directory path"
complete -c zig -n "__fish_seen_subcommand_from build" -l "sysroot" -r -d "[path] Set the system root directory (usually /)"
complete -c zig -n "__fish_seen_subcommand_from build" -l "search-prefix" -r -d "[path] Add a path to look for binaries, libraries, headers"
complete -c zig -n "__fish_seen_subcommand_from build" -l "libc" -r -d "[file] Provide a file which specifies libc paths"
complete -c zig -n "__fish_seen_subcommand_from build" -l "glibc-runtimes" -r -d "[path] Enhances QEMU integration by providing glibc built for multiple foreign architectures, allowing execution of non-native programs that link with glibc."
complete -c zig -n "__fish_seen_subcommand_from build" -l "verbose" -d "Print commands before executing them"
complete -c zig -n "__fish_seen_subcommand_from build" -l "color" -r -d "[auto|off|on] Enable or disable colored error messages"
complete -c zig -n "__fish_seen_subcommand_from build" -l "prominent-compile-errors" -d "Output compile errors formatted for a human to read"

# Toggles
complete -c zig -n "__fish_seen_subcommand_from build" -o "fdarling" -d "Integration with system-installed Darling to execute macOS programs on Linux hosts (default: no)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "fno-darling" -d "Integration with system-installed Darling to execute macOS programs on Linux hosts (default: no)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "fqemu" -d "Integration with system-installed QEMU to execute foreign-architecture programs on Linux hosts (default: no)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "fno-qemu" -d "Integration with system-installed QEMU to execute foreign-architecture programs on Linux hosts (default: no)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "frosetta" -d "Rely on Rosetta to execute x86_64 programs on ARM64 macOS hosts. (default: no)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "fno-rosetta" -d "Rely on Rosetta to execute x86_64 programs on ARM64 macOS hosts. (default: no)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "fwasmtime" -d "Integration with system-installed wasmtime to execute WASI binaries. (default: no)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "fno-wasmtime" -d "Integration with system-installed wasmtime to execute WASI binaries. (default: no)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "fwine" -d "Integration with system-installed Wine to execute Windows programs on Linux hosts. (default: no)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "fno-wine" -d "Integration with system-installed Wine to execute Windows programs on Linux hosts. (default: no)"

# Project-s "Specific" Options:
complete -c zig -n "__fish_seen_subcommand_from build" -o "Dtarget" -r -d "[string] The CPU architecture, OS, and ABI to build for"
complete -c zig -n "__fish_seen_subcommand_from build" -o "Dcpu" -r -d "[string] Target CPU features to add or subtract"
complete -c zig -n "__fish_seen_subcommand_from build" -o "Drelease-safe" -r -d "[bool] Optimizations on and safety on"
complete -c zig -n "__fish_seen_subcommand_from build" -o "Drelease-fast" -r -d "[bool] Optimizations on and safety off"
complete -c zig -n "__fish_seen_subcommand_from build" -o "Drelease-small" -r -d "[bool] Size optimizations on and safety off"
complete -c zig -n "__fish_seen_subcommand_from build" -o "Denable_tracy" -r -d "[bool] Whether tracy should be enabled."
complete -c zig -n "__fish_seen_subcommand_from build" -o "Dgenerate_coverage" -r -d "[bool] Generate coverage data with kcov"
complete -c zig -n "__fish_seen_subcommand_from build" -o "Dcoverage_output_dir" -r -d "[string] Output directory for coverage data"
complete -c zig -n "__fish_seen_subcommand_from build" -o "Ddata_version" -r -d "[enum] The Zig version your compiler is (master 0.7.0 0.7.1 0.8.0 0.8.1 0.9.0 0.9.1 0.10.0)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "Dlog_level" -r -d "[enum] The Log Level to be used (err warn info debug)"
complete -c zig -n "__fish_seen_subcommand_from build" -o "Denable_tracy_allocation" -r -d "[bool] Enable using TracyAllocator to monitor allocations."
complete -c zig -n "__fish_seen_subcommand_from build" -o "Denable_tracy_callstack" -r -d "[bool] Enable callstack graphs."
complete -c zig -n "__fish_seen_subcommand_from build" -o "Dknown-folders" -r -d "[string] Path to known-folders package (default: src/known-folders/known-folders.zig)"

# Advanced Options:
complete -c zig -n "__fish_seen_subcommand_from build" -o "fstage1" -d "Force using bootstrap compiler as the codegen backend"
complete -c zig -n "__fish_seen_subcommand_from build" -o "fno-stage1" -d "Prevent using bootstrap compiler as the codegen backend"
complete -c zig -n "__fish_seen_subcommand_from build" -o "freference-trace" -r -d "[num] How many lines of reference trace should be shown per compile error"
complete -c zig -n "__fish_seen_subcommand_from build" -o "fno-reference-trace" -d "Disable reference trace"
complete -c zig -n "__fish_seen_subcommand_from build" -l "build-file" -r -d "[file] Override path to build.zig"
complete -c zig -n "__fish_seen_subcommand_from build" -l "cache-dir" -r -d "[path] Override path to local Zig cache directory"
complete -c zig -n "__fish_seen_subcommand_from build" -l "global-cache-dir" -r -d "[path] Override path to global Zig cache directory"
complete -c zig -n "__fish_seen_subcommand_from build" -l "zig-lib-dir" -r -d "[arg] Override path to Zig lib directory"
complete -c zig -n "__fish_seen_subcommand_from build" -l "debug-log" -r -d "[scope] Enable debugging the compiler"
complete -c zig -n "__fish_seen_subcommand_from build" -l "verbose-link" -d "Enable compiler debug output for linking"
complete -c zig -n "__fish_seen_subcommand_from build" -l "verbose-air" -d "Enable compiler debug output for Zig AIR"
complete -c zig -n "__fish_seen_subcommand_from build" -l "verbose-llvm-ir" -d "Enable compiler debug output for LLVM IR"
complete -c zig -n "__fish_seen_subcommand_from build" -l "verbose-cimport" -d "Enable compiler debug output for C imports"
complete -c zig -n "__fish_seen_subcommand_from build" -l "verbose-cc" -d "Enable compiler debug output for C compilation"
complete -c zig -n "__fish_seen_subcommand_from build" -l "verbose-llvm-cpu-features" -d "Enable compiler debug output for LLVM CPU features"
